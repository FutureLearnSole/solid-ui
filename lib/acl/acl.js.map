{"version":3,"sources":["../../src/acl/acl.ts"],"names":["adoptACLDefault","doc","aclDoc","defaultResource","defaultACLdoc","ACL","ns","acl","isContainer","uri","slice","defaults","kb","each","undefined","concat","proposed","map","da","statementsMatching","push","$rdf","st","kb2","graph","move","sym","y","length","add","subject","predicate","object","readACL","x","getDefaults","auths","getDefaultsFallback","ac","agent","agentClass","agentGroup","origin","originClass","Object","keys","forEach","pred","a","mode","sameACL","b","contains","ACLunion","list","ag","k","loadUnionACL","subjectList","callbackFunction","aclList","doList","shift","getACLorDefault","ok","p2","targetDoc","targetACLDoc","defaultHolder","defaultACLDoc","defa","ACLbyCombination","byCombo","combo","sort","combo2","join","makeACLGraph","makeACLGraphbyCombo","main","modeURIs","split","short","u","rdf","i","pairs","ACLToString","comboToString","str","initials","sameTerm","foaf","utils","label","makeACLString","serialize","putACLObject","putACLbyCombo","updater","put","message","fetcher","unload","requested","fixIndividualCardACL","person","log","groups","vcard","fixIndividualACL","item","subjects","debug","exists","union","setACL","docURI","aclText","any","webOperation","data","contentType","then","nowOrWhenFetched","body","getACL","status","tryParent","right","lastIndexOf","left","indexOf","doc2","nonexistent","response","getProspectiveHolder","targetDirectory","Promise","resolve","reject","isDirectACL","Error"],"mappings":"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","sourcesContent":["/**\n * Non-UI functions for access control.\n * See https://github.com/solid/web-access-control-spec\n * for the spec that defines how ACL documents work.\n * @packageDocumentation\n */\n\nimport * as $rdf from 'rdflib'\nimport ns from '../ns'\nimport kb from '../store.js'\nimport utils from '../utils'\nimport { AgentMapMap, ComboList } from './types'\nimport * as debug from '../debug'\n\n/**\n * Take the \"default\" ACL and convert it into the equivlent ACL\n * which the resource would have had. Return it as a new separate store.\n * The \"defaultForNew\" predicate is also accepted, as a deprecated\n * synonym for \"default\".\n */\nexport function adoptACLDefault (\n  doc: $rdf.NamedNode,\n  aclDoc: $rdf.NamedNode,\n  defaultResource: $rdf.NamedNode,\n  defaultACLdoc: $rdf.NamedNode\n): $rdf.IndexedFormula {\n  const ACL = ns.acl\n  const isContainer = doc.uri.slice(-1) === '/' // Give default for all directories\n  const defaults = kb\n    .each(undefined, ACL('default'), defaultResource, defaultACLdoc)\n    .concat(\n      kb.each(undefined, ACL('defaultForNew'), defaultResource, defaultACLdoc)\n    )\n  let proposed: Array<$rdf.Statement> = []\n  defaults.map(function (da) {\n    proposed = proposed\n      .concat(kb.statementsMatching(da, ACL('agent'), undefined, defaultACLdoc))\n      .concat(kb.statementsMatching(da, ACL('agentClass'), undefined, defaultACLdoc))\n      .concat(kb.statementsMatching(da, ACL('agentGroup'), undefined, defaultACLdoc))\n      .concat(kb.statementsMatching(da, ACL('origin'), undefined, defaultACLdoc))\n      .concat(kb.statementsMatching(da, ACL('originClass'), undefined, defaultACLdoc))\n      .concat(kb.statementsMatching(da, ACL('mode'), undefined, defaultACLdoc))\n    proposed.push($rdf.st(da, ACL('accessTo'), doc, defaultACLdoc)) // Suppose\n    if (isContainer) {\n      // By default, make this apply to folder contents too\n      proposed.push($rdf.st(da, ACL('default'), doc, defaultACLdoc))\n    }\n  })\n  const kb2 = $rdf.graph() // Potential - derived is kept apart\n  proposed.map(function (st) {\n    const move = function (sym) {\n      const y = defaultACLdoc.uri.length // The default ACL file\n      return $rdf.sym(\n        sym.uri.slice(0, y) === defaultACLdoc.uri\n          ? aclDoc.uri + sym.uri.slice(y)\n          : sym.uri\n      )\n    }\n    kb2.add(\n      move(st.subject),\n      move(st.predicate),\n      move(st.object),\n      $rdf.sym(aclDoc.uri)\n    )\n  })\n\n  return kb2\n}\n\n/**\n * Read and canonicalize the ACL for x in aclDoc\n *\n * Accumulate the access rights which each agent or class has\n */\nexport function readACL (\n  x: $rdf.NamedNode,\n  aclDoc: $rdf.NamedNode,\n  kb2: $rdf.IndexedFormula = kb,\n  getDefaults?: boolean\n): AgentMapMap {\n  const auths: Array<$rdf.NamedNode> = getDefaults\n    ? getDefaultsFallback(kb2, ns)\n    : kb2.each(undefined, ns.acl('accessTo'), x)\n\n  const ACL = ns.acl\n  const ac = {\n    agent: {},\n    agentClass: {},\n    agentGroup: {},\n    origin: {},\n    originClass: {}\n  }\n  Object.keys(ac).forEach(pred => {\n    auths.forEach(function (a) {\n      (kb2.each(a, ACL('mode')) as Array<$rdf.NamedNode>).forEach(function (mode) {\n        (kb2.each(a, ACL(pred)) as Array<$rdf.NamedNode>).forEach(function (agent) {\n          ac[pred][agent.uri] = ac[pred][agent.uri] || {}\n          ac[pred][agent.uri][mode.uri] = a // could be \"true\" but leave pointer just in case\n        })\n      })\n    })\n  })\n  return ac\n\n  function getDefaultsFallback (kb, ns) {\n    return kb\n      .each(undefined, ns.acl('default'), x)\n      .concat(kb.each(undefined, ns.acl('defaultForNew'), x))\n  }\n}\n\n/**\n * Compare two ACLs\n */\nexport function sameACL (a: AgentMapMap, b: AgentMapMap): boolean {\n  const contains = function (a, b) {\n    for (const pred in {\n      agent: true,\n      agentClass: true,\n      agentGroup: true,\n      origin: true,\n      originClass: true\n    }) {\n      if (a[pred]) {\n        for (const agent in a[pred]) {\n          for (const mode in a[pred][agent]) {\n            if (!b[pred][agent] || !b[pred][agent][mode]) {\n              return false\n            }\n          }\n        }\n      }\n    }\n    return true\n  }\n  return contains(a, b) && contains(b, a)\n}\n\n/**\n * Union N ACLs\n */\nexport function ACLunion (list: Array<AgentMapMap>): AgentMapMap {\n  const b = list[0]\n  let a, ag\n  for (let k = 1; k < list.length; k++) {\n    ;['agent', 'agentClass', 'agentGroup', 'origin', 'originClass'].map(\n      function (pred) {\n        a = list[k]\n        if (a[pred]) {\n          for (ag in a[pred]) {\n            for (const mode in a[pred][ag]) {\n              if (!b[pred][ag]) b[pred][ag] = []\n              b[pred][ag][mode] = true\n            }\n          }\n        }\n      }\n    )\n  }\n  return b\n}\n\n/**\n * Merge ACLs lists from things to form union\n */\nexport function loadUnionACL (subjectList: Array<$rdf.NamedNode>, callbackFunction: Function): void {\n  const aclList: Array<AgentMapMap> = []\n  const doList = function (list) {\n    if (list.length) {\n      const doc = list.shift().doc()\n      getACLorDefault(doc, function (\n        ok,\n        p2,\n        targetDoc,\n        targetACLDoc,\n        defaultHolder,\n        defaultACLDoc\n      ) {\n        const defa = !p2\n        if (!ok || !defaultHolder || !defaultACLDoc) return callbackFunction(ok, targetACLDoc)\n        const acl = defa\n          ? readACL(defaultHolder, defaultACLDoc)\n          : readACL(targetDoc as $rdf.NamedNode, targetACLDoc as $rdf.NamedNode)\n        aclList.push(acl)\n        doList(list.slice(1))\n      })\n    } else {\n      // all gone\n      callbackFunction(true, ACLunion(aclList))\n    }\n  }\n  doList(subjectList)\n}\n\n/**\n * Represents these as an RDF graph by combination of modes\n *\n * Each agent can only be in one place in this model, one combination of modes.\n * Combos are like full control, read append, read only etc.\n */\nexport function ACLbyCombination (ac: AgentMapMap): ComboList {\n  const byCombo = {}\n  ;['agent', 'agentClass', 'agentGroup', 'origin', 'originClass'].map(function (pred) {\n    for (const agent in ac[pred]) {\n      const combo: string[] = []\n      for (const mode in ac[pred][agent]) {\n        combo.push(mode)\n      }\n      combo.sort()\n      const combo2 = combo.join('\\n')\n      if (!byCombo[combo2]) byCombo[combo2] = []\n      byCombo[combo2].push([pred, agent])\n    }\n  })\n  return byCombo\n}\n\n/**\n * Write ACL graph to store from AC\n */\nexport function makeACLGraph (kb: $rdf.IndexedFormula, x: $rdf.NamedNode, ac: AgentMapMap, aclDoc: $rdf.NamedNode): void {\n  const byCombo = ACLbyCombination(ac)\n  return makeACLGraphbyCombo(kb, x, byCombo, aclDoc)\n}\n\n/**\n * Write ACL graph to store from combo\n */\nexport function makeACLGraphbyCombo (\n  kb: $rdf.IndexedFormula,\n  x: $rdf.NamedNode,\n  byCombo: ComboList,\n  aclDoc: $rdf.NamedNode,\n  main?: boolean,\n  defa?: boolean\n): void {\n  const ACL = ns.acl\n  for (const combo in byCombo) {\n    const modeURIs = combo.split('\\n')\n    let short = modeURIs\n      .map(function (u) {\n        return u.split('#')[1]\n      })\n      .join('')\n    if (defa && !main) short += 'Default' // don't muddle authorizations\n    const a = kb.sym(aclDoc.uri + '#' + short)\n    kb.add(a, ns.rdf('type'), ACL('Authorization'), aclDoc)\n    if (main) {\n      kb.add(a, ACL('accessTo'), x, aclDoc)\n    }\n    if (defa) {\n      kb.add(a, ACL('default'), x, aclDoc)\n    }\n    for (let i = 0; i < modeURIs.length; i++) {\n      kb.add(a, ACL('mode'), kb.sym(modeURIs[i]), aclDoc)\n    }\n    const pairs = byCombo[combo]\n    for (let i = 0; i < pairs.length; i++) {\n      const pred = pairs[i][0]\n      const ag = pairs[i][1]\n      kb.add(a, ACL(pred), kb.sym(ag), aclDoc)\n    }\n  }\n}\n\n/**\n * Debugging short strings for dumping ACL\n * and possibly in the UI\n */\nexport function ACLToString (ac: AgentMapMap): string {\n  return comboToString(ACLbyCombination(ac))\n}\n\n/**\n * Convert a [[ComboList]] to a string\n */\nexport function comboToString (byCombo: ComboList): string {\n  let str = ''\n  for (const combo in byCombo) {\n    const modeURIs = combo.split('\\n')\n    const initials = modeURIs\n      .map(function (u) {\n        return u.split('#')[1][0]\n      })\n      .join('')\n    str += initials + ':'\n    const pairs = byCombo[combo]\n    for (let i = 0; i < pairs.length; i++) {\n      const pred = pairs[i][0]\n      const ag = $rdf.sym(pairs[i][1])\n      str += pred === 'agent' ? '@' : ''\n      str += ag.sameTerm(ns.foaf('Agent')) ? '*' : utils.label(ag)\n      if (i < pairs.length - 1) str += ','\n    }\n    str += ';'\n  }\n  return '{' + str.slice(0, -1) + '}' // drop extra semicolon\n}\n\n/**\n * Write ACL graph as Turtle\n */\nexport function makeACLString (x: $rdf.NamedNode, ac: AgentMapMap, aclDoc: $rdf.NamedNode): string {\n  const kb2 = $rdf.graph()\n  makeACLGraph(kb2, x, ac, aclDoc)\n  // @@ TODO Remove casting\n  return ($rdf as any).serialize(aclDoc, kb2, aclDoc.uri, 'text/turtle')\n}\n\n/**\n * Write ACL graph to web\n */\nexport function putACLObject (\n  kb: $rdf.IndexedFormula,\n  x: $rdf.NamedNode,\n  ac: AgentMapMap,\n  aclDoc: $rdf.NamedNode,\n  callbackFunction\n): void {\n  const byCombo = ACLbyCombination(ac)\n  return putACLbyCombo(kb, x, byCombo, aclDoc, callbackFunction)\n}\n\n/**\n * Write ACL graph to web from a [[ComboList]]\n */\nexport function putACLbyCombo (\n  kb: $rdf.IndexedFormula,\n  x: $rdf.NamedNode,\n  byCombo: ComboList,\n  aclDoc: $rdf.NamedNode,\n  callbackFunction: (ok: boolean, message?: string) => void\n): void {\n  const kb2 = $rdf.graph()\n  makeACLGraphbyCombo(kb2, x, byCombo, aclDoc, true)\n\n  // const str = makeACLString = function(x, ac, aclDoc)\n  // @@ TODO Remove casting of kb.updater and kb.fetcher\n  ;(kb.updater as $rdf.UpdateManager).put(\n    aclDoc,\n    kb2.statementsMatching(undefined, undefined, undefined, aclDoc),\n    'text/turtle',\n    function (uri, ok, message) {\n      if (!ok) {\n        callbackFunction(ok, message)\n      } else {\n        ;(kb as any).fetcher.unload(aclDoc)\n        makeACLGraphbyCombo(kb, x, byCombo, aclDoc, true)\n        ;(kb as any).fetcher.requested[aclDoc.uri] = 'done' // missing: save headers\n        callbackFunction(ok)\n      }\n    }\n  )\n}\n\n/**\n * Fix the ACl for an individual card as a function of the groups it is in\n *\n * All group files must be loaded first\n */\nexport function fixIndividualCardACL (person: $rdf.NamedNode, log: Function, callbackFunction: Function): void {\n  const groups = kb.each(undefined, ns.vcard('hasMember'), person)\n  // const doc = person.doc()\n  if (groups) {\n    fixIndividualACL(person, groups, log, callbackFunction)\n  } else {\n    log('This card is in no groups')\n    callbackFunction(true) // fine, no requirements to access. default should be ok\n  }\n  // @@ if no groups, then use default for People container or the book top container.?\n}\n\n/**\n * This function is used by [[fixIndividualCardACL]]\n */\nexport function fixIndividualACL (item: $rdf.NamedNode, subjects: Array<$rdf.NamedNode>, log: Function, callbackFunction: Function): void {\n  log = log || debug.log\n  const doc = item.doc()\n  getACLorDefault(doc, function (\n    ok,\n    exists,\n    targetDoc,\n    targetACLDoc,\n    defaultHolder,\n    defaultACLDoc\n  ) {\n    if (!ok || !defaultHolder || !defaultACLDoc) return callbackFunction(false, targetACLDoc) // ie message\n    const ac = exists\n      ? readACL(targetDoc as $rdf.NamedNode, targetACLDoc as $rdf.NamedNode)\n      : readACL(defaultHolder, defaultACLDoc)\n    loadUnionACL(subjects, function (ok, union) {\n      if (!ok) return callbackFunction(false, union)\n      if (sameACL(union, ac)) {\n        log('Nice - same ACL. no change ' + utils.label(item) + ' ' + doc)\n      } else {\n        log('Group ACLs differ for ' + utils.label(item) + ' ' + doc)\n\n        // log(\"Group ACLs: \" + makeACLString(targetDoc, union, targetACLDoc))\n        // log((exists ? \"Previous set\" : \"Default\") + \" ACLs: \" +\n        // makeACLString(targetDoc, ac, targetACLDoc))\n\n        putACLObject(\n          kb,\n          targetDoc as $rdf.NamedNode,\n          union,\n          targetACLDoc as $rdf.NamedNode,\n          callbackFunction\n        )\n      }\n    })\n  })\n}\n\n/**\n * Set an ACL\n */\nexport function setACL (\n  docURI: $rdf.NamedNode,\n  aclText: string,\n  callbackFunction: (ok: boolean, message: string) => void\n): void {\n  const aclDoc = kb.any(\n    kb.sym(docURI),\n    kb.sym('http://www.iana.org/assignments/link-relations/acl')\n  ) // @@ check that this get set by web.js\n  if (aclDoc) {\n    // Great we already know where it is\n    kb.fetcher\n      .webOperation('PUT', aclDoc.uri, {\n        data: aclText,\n        contentType: 'text/turtle'\n      })\n      .then(callbackFunction) // @@@ check params\n  } else {\n    kb.fetcher.nowOrWhenFetched(docURI, undefined, function (ok, body) {\n      if (!ok) return callbackFunction(ok, 'Gettting headers for ACL: ' + body)\n      const aclDoc = kb.any(\n        kb.sym(docURI),\n        kb.sym('http://www.iana.org/assignments/link-relations/acl')\n      ) // @@ check that this get set by web.js\n      if (!aclDoc) {\n        // complainIfBad(false, \"No Link rel=ACL header for \" + docURI)\n        callbackFunction(false, 'No Link rel=ACL header for ' + docURI)\n      } else {\n        kb.fetcher\n          .webOperation('PUT', aclDoc.uri, {\n            data: aclText,\n            contentType: 'text/turtle'\n          })\n          .then(callbackFunction)\n      }\n    })\n  }\n}\n\n/**\n * Get ACL file or default if necessary\n *\n * @param callbackFunction  Will be called in the following ways, in the following cases:\n * * `callbackFunction(true, true, doc, aclDoc)` if the ACL did exist\n * * `callbackFunction(true, false, doc, aclDoc, defaultHolder, defaultACLDoc)` if the ACL file did not exist but a default did\n * * `callbackFunction(false, false, status, message)` when there was an error getting the original\n * * `callbackFunction(false, true, status, message)` when there was an error getting the default\n */\nexport function getACLorDefault (\n  doc: $rdf.NamedNode,\n  callbackFunction: (\n    a: boolean,\n    b: boolean,\n    statusOrMessage: number | $rdf.NamedNode,\n    message: string | $rdf.NamedNode,\n    c?: $rdf.NamedNode,\n    d?: $rdf.NamedNode\n  ) => void\n): void {\n  getACL(doc, function (ok, status, aclDoc, message) {\n    const ACL = ns.acl\n    if (!ok) return callbackFunction(false, false, status as number, message as string)\n\n    // Recursively search for the ACL file which gives default access\n    const tryParent = function (uri) {\n      if (uri.slice(-1) === '/') {\n        uri = uri.slice(0, -1)\n      }\n      const right = uri.lastIndexOf('/')\n      const left = uri.indexOf('/', uri.indexOf('//') + 2)\n      if (left > right) {\n        return callbackFunction(false, true, 404, 'Found no ACL resource')\n      }\n      uri = uri.slice(0, right + 1)\n      const doc2 = $rdf.sym(uri)\n      getACL(doc2, function (ok, status, defaultACLDoc) {\n        if (!ok) {\n          return callbackFunction(\n            false,\n            true,\n            status as number,\n            `( No ACL pointer ${uri} ${status})${defaultACLDoc}`\n          )\n        } else if (status === 403) {\n          return callbackFunction(\n            false,\n            true,\n            status,\n            `( default ACL file FORBIDDEN. Stop.${uri})`\n          )\n        } else if (status === 404) {\n          return tryParent(uri)\n        } else if (status !== 200) {\n          return callbackFunction(\n            false,\n            true,\n            status as number,\n            `Error status '${status}' searching for default for ${doc2}`\n          )\n        }\n        // 200\n        // statusBlock.textContent += (\" ACCESS set at \" + uri + \". End search.\")\n        const defaults = kb\n          .each(undefined, ACL('default'), kb.sym(uri), defaultACLDoc)\n          .concat(\n            kb.each(undefined, ACL('defaultForNew'), kb.sym(uri), defaultACLDoc)\n          )\n        if (!defaults.length) {\n          return tryParent(uri) // Keep searching\n        }\n        const defaultHolder = kb.sym(uri)\n        return callbackFunction(\n          true,\n          false,\n          doc,\n          aclDoc as $rdf.NamedNode,\n          defaultHolder,\n          defaultACLDoc as $rdf.NamedNode\n        )\n      })\n    } // tryParent\n\n    if (!ok) {\n      return callbackFunction(\n        false,\n        false,\n        status as number,\n        `Error accessing Access Control information for ${doc}) ${message}`\n      )\n    } else if (status === 404) {\n      tryParent(doc.uri) //  @@ construct default one - the server should do that\n    } else if (status === 403) {\n      return callbackFunction(\n        false,\n        false,\n        status,\n        `(Sharing not available to you)${message}`\n      )\n    } else if (status !== 200) {\n      return callbackFunction(\n        false,\n        false,\n        status as number,\n        `Error ${status} accessing Access Control information for ${doc}: ${message}`\n      )\n    } else {\n      // 200\n      return callbackFunction(true, true, doc, aclDoc as $rdf.NamedNode)\n    }\n  }) // Call to getACL\n}\n\n/**\n * Calls back `(ok, status, acldoc, message)` as follows\n *\n * * `(false, 900, errormessage)` if no link header\n * * `(true, 403, documentSymbol, fileaccesserror)` if not authorized\n * * `(true, 404, documentSymbol, fileaccesserror)` if does not exist\n * * `(true, 200, documentSymbol)` if file exists and read OK\n */\nexport function getACL (\n  doc: $rdf.NamedNode,\n  callbackFunction: (\n    ok: boolean,\n    messageOrStatus: number | string,\n    messageOrDoc?: $rdf.NamedNode | string,\n    message?: string\n  ) => void\n): void {\n  kb.fetcher.nowOrWhenFetched(doc, undefined, function (ok, body) {\n    if (!ok) {\n      return callbackFunction(ok, `Can't get headers to find ACL for ${doc}: ${body}`)\n    }\n    const aclDoc = kb.any(\n      doc,\n      kb.sym('http://www.iana.org/assignments/link-relations/acl')\n    ) // @@ check that this get set by web.js\n    if (!aclDoc) {\n      callbackFunction(false, 900, `No Link rel=ACL header for ${doc}`)\n    } else {\n      if (kb.fetcher.nonexistent[aclDoc.uri]) {\n        return callbackFunction(\n          true,\n          404,\n          aclDoc,\n          `ACL file ${aclDoc} does not exist.`\n        )\n      }\n      kb.fetcher.nowOrWhenFetched(aclDoc, undefined, function (\n        ok,\n        message,\n        response\n      ) {\n        if (!ok) {\n          callbackFunction(\n            true,\n            response.status,\n            aclDoc,\n            `Can't read Access Control File ${aclDoc}: ${message}`\n          )\n        } else {\n          callbackFunction(true, 200, aclDoc)\n        }\n      })\n    }\n  })\n}\n\n/**\n * Calls [[getACLorDefault]] and then (?)\n */\nexport async function getProspectiveHolder (targetDirectory: string): Promise<$rdf.NamedNode | undefined> {\n  return new Promise((resolve, reject) => getACLorDefault($rdf.sym(targetDirectory), (\n    ok,\n    isDirectACL,\n    targetDoc,\n    targetACLDoc,\n    defaultHolder\n  ) => {\n    if (ok) {\n      return resolve((isDirectACL ? targetDoc : defaultHolder) as $rdf.NamedNode)\n    }\n    return reject(new Error(`Error loading ${targetDirectory}`))\n  }))\n}\n"],"file":"acl.js"}