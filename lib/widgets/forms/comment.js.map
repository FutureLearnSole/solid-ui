{"version":3,"sources":["../../../src/widgets/forms/comment.ts"],"names":["commentField","dom","container","already","subject","form","_doc","_callbackFunction","kb","store","contents","any","ns","ui","uri","params","fieldParams","console","log","Object","keys","undefined","box","createElement","appendChild","p","element","textContent","style","setAttribute"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAkBO,SAASA,YAAT,CACLC,GADK,EAELC,SAFK,EAGLC,OAHK,EAILC,OAJK,EAKLC,IALK,EAMLC,IANK,EAOLC,iBAPK,EAQL;AACA,MAAMC,EAAE,GAAGC,iBAAX;AACA,MAAIC,QAAQ,GAAGF,EAAE,CAACG,GAAH,CAAON,IAAP,EAAaO,eAAGC,EAAH,CAAM,UAAN,CAAb,CAAf;AACA,MAAI,CAACH,QAAL,EAAeA,QAAQ,GAAG,sCAAX;AAEf,MAAMI,GAAG,GAAG,yCAAqBT,IAArB,CAAZ;AACA,MAAIU,MAAM,GAAGC,yBAAYF,GAAZ,CAAb;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ,EAAiBC,MAAjB,EAAyBI,MAAM,CAACC,IAAP,CAAYJ,wBAAZ,CAAzB;;AACA,MAAID,MAAM,KAAKM,SAAf,EAA0B;AACxBJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAH,IAAAA,MAAM,GAAG,EAAT;AACD,GAHD,MAGO;AACLE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,GAbD,CAaE;;;AAEF,MAAMI,GAAG,GAAGrB,GAAG,CAACsB,aAAJ,CAAkB,KAAlB,CAAZ;AACA,MAAIrB,SAAJ,EAAeA,SAAS,CAACsB,WAAV,CAAsBF,GAAtB;AACf,MAAMG,CAAC,GAAGH,GAAG,CAACE,WAAJ,CAAgBvB,GAAG,CAACsB,aAAJ,CAAkBR,MAAM,CAACW,OAAP,IAAkB,GAApC,CAAhB,CAAV;AACAD,EAAAA,CAAC,CAACE,WAAF,GAAgBjB,QAAhB;AAEA,MAAIkB,KAAK,GAAGpB,EAAE,CAACG,GAAH,CAAON,IAAP,EAAaO,eAAGC,EAAH,CAAM,OAAN,CAAb,CAAZ;;AACA,MAAIe,KAAK,KAAKP,SAAd,EAAyB;AACvBO,IAAAA,KAAK,GAAGb,MAAM,CAACa,KAAP,GAAeb,MAAM,CAACa,KAAtB,GAA8B,EAAtC;AACD;;AACD,MAAIA,KAAJ,EAAWH,CAAC,CAACI,YAAF,CAAe,OAAf,EAAwBD,KAAxB;AAEX,SAAON,GAAP;AACD","sourcesContent":["import store from '../../store'\nimport ns from '../../ns'\nimport { mostSpecificClassURI } from './fieldFunction'\nimport { fieldParams } from './fieldParams'\n\n/**\n * A [[FieldFunction]] for a simple comment box. It will look for\n * the first (form, ns.ui('contents'), ?) triple it can find in\n * UI.store and use the value of the object of that triple as\n * the comment text.\n *\n * @param dom The DOM\n * @param container If set, the result will be appended to it as a child\n * @param already Unused\n * @param subject Unused\n * @param form RDF node with `ns.ui('contents')` attribute\n * @param _doc Unused\n * @param _callbackFunction Unused\n *\n * @returns a DOM element containing the comment.\n */\nexport function commentField (\n  dom: HTMLDocument,\n  container: HTMLElement | undefined,\n  already: any,\n  subject: any,\n  form,\n  _doc,\n  _callbackFunction\n) {\n  const kb = store\n  let contents = kb.any(form, ns.ui('contents'))\n  if (!contents) contents = 'Error: No contents in comment field.'\n\n  const uri = mostSpecificClassURI(form)\n  let params = fieldParams[uri]\n  console.log(uri, params, Object.keys(fieldParams))\n  if (params === undefined) {\n    console.log('no params!')\n    params = {}\n  } else {\n    console.log('yes params!')\n  } // non-bottom field types can do this\n\n  const box = dom.createElement('div')\n  if (container) container.appendChild(box)\n  const p = box.appendChild(dom.createElement(params.element || 'p'))\n  p.textContent = contents\n\n  let style = kb.any(form, ns.ui('style'))\n  if (style === undefined) {\n    style = params.style ? params.style : ''\n  }\n  if (style) p.setAttribute('style', style)\n\n  return box\n}\n"],"file":"comment.js"}