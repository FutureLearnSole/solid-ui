// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GroupBuilder.add runs: Promise {} 1`] = `Promise {}`;

exports[`GroupBuilder.handleRemove runs: [Function] 1`] = `[Function]`;

exports[`GroupBuilder.render runs: 
GroupBuilder {
  "book": Object {
    "dir": [Function],
    "doc": [Function],
    "elements": Array [],
    "sameTerm": [Function],
    "uri": "uri",
    "value": "",
  },
  "doneBuildingCb": [Function],
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex; flex-direction: column;"
    >
      <label>
        Group Name:
        <input
          type="text"
        />
      </label>
      <button>
        Done
      </button>
    </div>
  </p>,
  "group": Object {
    "dir": [Function],
    "doc": [Function],
    "elements": Array [],
    "sameTerm": [Function],
    "uri": "uri",
    "value": "",
  },
  "groupChangedCb": [Function],
  "onGroupChanged": [Function],
}
 1`] = `
GroupBuilder {
  "book": Object {
    "dir": [Function],
    "doc": [Function],
    "elements": Array [],
    "sameTerm": [Function],
    "uri": "uri",
    "value": "",
  },
  "doneBuildingCb": [Function],
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex; flex-direction: column;"
    >
      <label>
        Group Name:
        <input
          type="text"
        />
      </label>
      <button>
        Done
      </button>
    </div>
  </p>,
  "group": Object {
    "dir": [Function],
    "doc": [Function],
    "elements": Array [],
    "sameTerm": [Function],
    "uri": "uri",
    "value": "",
  },
  "groupChangedCb": [Function],
  "onGroupChanged": [Function],
}
`;

exports[`GroupBuilder.setGroupName runs: Promise {} 1`] = `Promise {}`;

exports[`PeoplePicker.render .. type index ...: 
      PeoplePicker {
        "element": <p>
          <div
            style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
          />
        </p>,
        "groupPickedCb": [Function],
        "onSelectGroup": [Function],
        "options": Object {
          "selectedGroup": Object {},
        },
        "selectedgroup": undefined,
        "typeIndex": "publicTypeIndex",
      }
     1`] = `
PeoplePicker {
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
    />
  </p>,
  "findAddressBook": [Function],
  "groupPickedCb": [Function],
  "onSelectGroup": [Function],
  "options": Object {
    "selectedGroup": Object {},
  },
  "selectedgroup": undefined,
  "typeIndex": "publicTypeIndex",
}
`;

exports[`PeoplePicker.render mocking kb any for book: 
PeoplePicker {
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
    />
  </p>,
  "groupPickedCb": [Function],
  "onSelectGroup": [Function],
  "options": Object {
    "selectedGroup": true,
  },
  "selectedgroup": undefined,
  "typeIndex": Object {},
}
 1`] = `
PeoplePicker {
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
    />
  </p>,
  "findAddressBook": [Function],
  "groupPickedCb": [Function],
  "onSelectGroup": [Function],
  "options": Object {
    "selectedGroup": true,
  },
  "selectedgroup": undefined,
  "typeIndex": Object {},
}
`;

exports[`PeoplePicker.render runs 2: 
      PeoplePicker {
        "element": <p>
          <div
            style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
          />
        </p>,
        "groupPickedCb": [Function],
        "onSelectGroup": [Function],
        "options": Object {
          "selectedGroup": true,
        },
        "selectedgroup": undefined,
        "typeIndex": Object {},
      }
     1`] = `
PeoplePicker {
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
    />
  </p>,
  "findAddressBook": [Function],
  "groupPickedCb": [Function],
  "onSelectGroup": [Function],
  "options": Object {
    "selectedGroup": true,
  },
  "selectedgroup": undefined,
  "typeIndex": Object {},
}
`;

exports[`PeoplePicker.render runs: 
      PeoplePicker {
        "element": <p>
          <div
            style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
          />
        </p>,
        "groupPickedCb": [Function],
        "onSelectGroup": [Function],
        "options": Object {
          "selectedGroup": false,
        },
        "selectedgroup": undefined,
        "typeIndex": Object {},
      }
     1`] = `
PeoplePicker {
  "element": <p>
    <div
      style="max-width: 350px; min-height: 200px; outline: 1px solid black; display: flex;"
    />
  </p>,
  "findAddressBook": [Function],
  "groupPickedCb": [Function],
  "onSelectGroup": [Function],
  "options": Object {
    "selectedGroup": false,
  },
  "selectedgroup": undefined,
  "typeIndex": Object {},
}
`;

exports[`Person.render runs: 
Person {
  "element": <div>
    <div
      style="display: flex;"
    >
      <img
        height="50"
        src="undefined"
        style="margin: 5px;"
        width="50"
      />
      <span
        style="flex-grow: 1; margin: auto 0px;"
      >
        undefined
      </span>
      <button
        style="margin: 5px;"
      >
        Remove
      </button>
    </div>
  </div>,
  "handleRemove": true,
  "webIdNode": <div />,
}
 1`] = `
Person {
  "element": <div>
    <div
      style="display: flex;"
    >
      <img
        height="50"
        src="undefined"
        style="margin: 5px;"
        width="50"
      />
      <span
        style="flex-grow: 1; margin: auto 0px;"
      >
        undefined
      </span>
      <button
        style="margin: 5px;"
      >
        Remove
      </button>
    </div>
  </div>,
  "handleRemove": true,
  "webIdNode": <div />,
}
`;
